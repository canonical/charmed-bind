#!/bin/sh

# The goal of this script is to prepare

set -xe

# ----
# NGINX
# As nginx is only supplementary to the workload of the charm.
# As such, its files are handled in SNAP_DATA

# Copy nginx configuration
cp -r --preserve=mode "$SNAP/nginx" "$SNAP_DATA/nginx"

# Create some directories for nginx
mkdir -p $SNAP_DATA/nginx/tmp/body
mkdir -p $SNAP_DATA/nginx/tmp/nginx-proxy
mkdir -p $SNAP_DATA/nginx/tmp/nginx-fastcgi
mkdir -p $SNAP_DATA/nginx/tmp/nginx-uwsgi
mkdir -p $SNAP_DATA/nginx/tmp/nginx-scgi

# Edit nginx configuration
sed -i \
  -e "s|<SNAP_DATA>|${SNAP_DATA}|g" \
  -e "s|<SNAP_COMMON>|${SNAP_COMMON}|g" \
  "$SNAP_DATA/nginx/nginx.conf"

# Change ownership of some snap directories to allow snap_daemon to read/write
# https://snapcraft.io/docs/system-usernames
chown -R 584788:root $SNAP_DATA/nginx

# ----
# BIND
# Some parts of bind's files can be seen as part of the workload and renewed on refresh

# Create some directories for bind
mkdir -p "$SNAP_DATA/usr/share"
mkdir -p "$SNAP_DATA/var/cache/bind"

# Copy the config files to SNAP_DATA
cp -rf --preserve=mode "$SNAP/usr/share/dns" "$SNAP_DATA/usr/share"

# ----
# API (django and gunicorn)
# The only thing that should be kept between refreshes is the database

# Create the static directory for django
cp -r "$SNAP/api" "$SNAP_DATA/"
chmod -R 755 $SNAP_DATA/api

# Prepare the django app
cd $SNAP_DATA/api
export DJANGO_DATABASE_PATH="$SNAP_COMMON/api/db.sqlite3"
export DJANGO_SECRET_KEY="testkey"
python3 manage.py collectstatic --noinput

# Change ownership of some snap directories to allow snap_daemon to read/write
# https://snapcraft.io/docs/system-usernames
chown -R 584788:root $SNAP_DATA/api
